
type User {
  id: ID!
  name: String!
  email: EmailAddress!
  age: UnsignedInt
  posts(query: String, page: Int, limit: Int, orderBy: String): [Post!]!
  comments(query: String, page: Int, limit: Int, orderBy: String): [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
}

input SignupUserInput {
  name: String!
  email: EmailAddress!
  password: String!
  age: UnsignedInt
}

input LoginUserInput {
  email: EmailAddress!
  password: String!
}

type UpdateProfilePayload {
  errors: [ErrorPayload]
  user: User
}

input UpdateProfileInput {
  name: String
  age: UnsignedInt
}

input UpdateEmailInput {
  email: EmailAddress!
  currentPassword: String!
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
  confirmPassword: String!
}

type DeleteUserPayload {
  errors: [ErrorPayload]
  count: Int
}

type AuthPayload {
    token: String
    user: User
    errors: [ErrorPayload]
}
